// Code generated by go-bindata.
// sources:
// assets/templates/index.html.tpl
// assets/icons/back.png
// assets/icons/blank.png
// assets/icons/dir.png
// assets/icons/generic.png
// assets/icons/image2.png
// assets/icons/layout.png
// assets/icons/text.png
// DO NOT EDIT!

package api

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesIndexHtmlTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\xcd\x6e\xdb\x30\x0c\xc7\xcf\xf5\x53\x70\x3a\xec\x56\x13\x5d\xb1\x53\x64\x0d\x59\x9c\x62\x01\xf2\x85\x36\xc5\x30\x0c\x3b\x28\xb6\x12\x0b\x53\x64\x43\x12\x8a\x76\x82\xdf\x7d\x50\xa5\x2c\xcb\xd6\x14\xcd\x29\xa1\xf8\x27\xad\x1f\x45\x92\xbe\x2b\x17\xa3\xd5\xb7\xe5\x18\xbe\xac\x66\x53\x58\xde\x7f\x9e\x4e\x46\x40\x2e\x11\xbf\x5e\x8f\x10\xcb\x55\x19\x1d\xd7\xf9\x07\xb8\x91\x9a\x2b\xc4\xf1\x9c\xb0\x8c\x36\x6e\xa7\x58\x06\xb4\x11\xbc\x66\x19\x00\x75\xd2\x29\xc1\x26\xba\x16\x8f\xd0\x6e\xc0\xfb\x7c\x69\xc4\x46\x3e\xf6\x3d\xc5\xe8\xcb\x80\x62\x92\xd3\x75\x5b\x3f\x85\x2c\x57\x27\x22\x9a\xab\x98\x94\xaf\x9f\x03\xc3\x5f\xc3\xa8\x6b\xe0\x81\x2b\xb9\xd5\x05\x71\x6d\x47\x18\x95\xbb\x2d\x58\x53\x15\x04\xb9\xb5\xc2\x59\x94\x55\xab\x2d\xae\x15\xd7\x3f\xf3\x4e\x6f\x09\x70\xe5\x0a\xf2\x7d\x32\x5a\xfc\x20\x8c\xa2\x6b\x42\x12\x46\x39\x34\x46\x6c\x0a\xf2\x69\x54\xcc\x07\x8b\xa2\x24\x6c\xce\x77\x82\x22\x7f\x59\x33\x1b\x2c\x8a\x21\x61\x53\x6e\x1d\xec\xda\x5a\x6e\xa4\xa8\x4f\x8a\xef\xa2\xf8\x4e\xfe\x3a\x9d\xb0\x8c\x9a\x7b\x2b\x0c\xcc\x84\xe3\x07\x21\x3a\x73\xc4\x5b\xb5\xca\x76\x5c\x17\xe4\x23\x61\xb4\x31\x7f\xab\xbc\x97\x1b\xc8\x97\xdc\x08\xed\xf6\x95\xcb\x62\x5c\xfd\xc6\x3a\xf1\xea\xa8\x4c\xcb\xe1\xed\x78\xbe\x2a\x27\xb7\xb1\x58\x75\xc8\x74\xb8\x37\xca\xf0\x54\xe1\x99\x8e\x3e\x49\x58\xb4\xa1\x94\x46\x54\xae\x35\x4f\x89\x26\x86\xbf\xd7\x6b\xdb\x0d\xf6\x26\xa4\x6b\x19\xb9\x6d\x1c\x61\x00\x97\xf0\xa2\x32\x01\x0a\x5d\xf7\x7d\xe6\xbd\xe1\x7a\x2b\x20\xbf\x91\x4a\xd8\xbe\xcf\x2e\x22\x7a\x29\x4d\x30\xce\x42\xf6\x3e\x9f\x54\xad\xee\xfb\xc4\x9c\xec\xa1\x72\x81\xe4\x55\x68\xd7\x04\x89\xf7\x79\xe8\x95\xd0\xa4\x07\xca\x7f\xb0\x5e\x65\x3e\x76\xfe\x4f\x7d\xe1\xbd\x50\x56\x9c\x4d\x76\x3e\x1a\xef\x24\x3e\x5c\x61\xd5\x6a\x27\xb4\x3b\x93\xd1\xfb\x3c\xcc\xc3\x2c\x8d\xc3\xf3\x98\x9f\xd0\x85\x51\x38\xf8\xc3\x49\x68\xfc\xd0\xf7\xfb\xd3\x3f\xe0\xe9\xbd\xe3\xef\xdb\xc6\x80\x62\xda\x12\x14\xd3\x56\xc1\xb8\x9c\x7e\x07\x00\x00\xff\xff\x23\x63\xf3\x1c\xdc\x04\x00\x00")

func assetsTemplatesIndexHtmlTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesIndexHtmlTpl,
		"assets/templates/index.html.tpl",
	)
}

func assetsTemplatesIndexHtmlTpl() (*asset, error) {
	bytes, err := assetsTemplatesIndexHtmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/index.html.tpl", size: 1244, mode: os.FileMode(420), modTime: time.Unix(1524425025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIconsBackPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x61\x60\x60\x10\xe3\x60\x66\x60\x60\xf8\x3e\xdf\xc7\x84\x81\x81\x41\x28\xc0\x27\xc4\xf5\xff\xff\xff\x67\xfe\xff\x9f\x39\x73\x66\x5a\x5a\x9a\xb1\xb1\x31\x03\x03\xc3\xbc\xee\x59\xcf\x19\x18\x18\x98\x4a\x82\xfc\x82\xff\x33\x3c\xdd\x6e\xe0\xc5\xc0\xc0\x10\xea\xe9\xe2\x18\x52\xc1\x98\x7b\xd1\x91\xeb\x80\x03\x87\x73\xe0\xe3\x19\xbf\xe3\x77\x0a\x6c\xd1\x15\xfe\xff\x69\x62\xaf\x44\x44\xd5\xc7\x05\xa7\x0c\xbc\x7f\x06\xdd\x04\x43\x5d\xef\x00\x8e\xab\x2c\x7c\x66\xcc\x91\x32\x2a\x53\x52\x26\xc8\xfc\x9c\x50\xbe\x31\xa2\x55\xda\xf8\x0e\x5f\x4e\xe4\xca\xdb\xfa\x8d\x02\xf5\x19\x53\xf2\xde\x17\x7c\x91\x7b\xbc\x8d\x65\xfa\xd1\x04\x2e\x90\xad\x0c\x9e\xae\x7e\x2e\xeb\x9c\x12\x9a\x00\x01\x00\x00\xff\xff\xd2\x0e\x82\x8a\xba\x00\x00\x00")

func assetsIconsBackPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsIconsBackPng,
		"assets/icons/back.png",
	)
}

func assetsIconsBackPng() (*asset, error) {
	bytes, err := assetsIconsBackPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/icons/back.png", size: 186, mode: os.FileMode(420), modTime: time.Unix(1524065962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIconsBlankPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x61\x60\x60\x10\xe3\x60\x66\x60\x60\xf8\x3e\xdf\xc7\x84\x81\x81\x81\x2d\xc0\x27\xc4\xf5\xff\xff\xff\x67\xfe\xff\x2f\x0e\x5c\xb7\x94\x81\x81\x81\xa9\x24\xc8\x2f\xf8\x3f\xc3\xd3\xed\x06\x5e\x0c\x0c\x0c\x02\x9e\x2e\x8e\x21\x15\x8c\xc9\x09\x47\x98\xda\x56\x3c\x58\xa1\xc0\xd0\xf7\x94\x71\xe7\xf2\x8c\x5f\x12\x0c\x0c\x0c\x0c\x9e\xae\x7e\x2e\xeb\x9c\x12\x9a\x00\x01\x00\x00\xff\xff\x36\xe7\x72\x91\x69\x00\x00\x00")

func assetsIconsBlankPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsIconsBlankPng,
		"assets/icons/blank.png",
	)
}

func assetsIconsBlankPng() (*asset, error) {
	bytes, err := assetsIconsBlankPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/icons/blank.png", size: 105, mode: os.FileMode(420), modTime: time.Unix(1524065959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIconsDirPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\xae\x00\x51\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x14\x00\x00\x00\x16\x08\x03\x00\x00\x00\xf7\x9f\x4c\x34\x00\x00\x00\x12\x50\x4c\x54\x45\xff\xff\xff\xff\xcc\x99\xcc\xff\xff\x99\x66\x33\x33\x33\x33\x00\x00\x00\xc2\x12\xfa\xa8\x00\x00\x00\x03\x74\x52\x4e\x53\xff\xff\x00\xd7\xca\x0d\x41\x00\x00\x00\x48\x49\x44\x41\x54\x78\xda\xcd\xca\x41\x0e\x80\x40\x08\x43\x51\xa5\xed\xfd\xaf\xec\x40\x3a\xd1\x26\xee\xdc\xf8\xd9\x90\x07\x47\xbd\xf4\x1d\xe5\x9e\xa8\xd3\xe9\xc6\x31\xeb\x34\x88\x6d\x5e\x34\x9f\x70\xfb\xa6\xc6\x0c\xa0\x1a\x33\xe3\x0f\x3f\x11\xd3\x58\x42\xc6\xc6\x12\x33\x71\x61\x29\x63\x5d\x31\x2c\x03\xd3\xb5\xa4\xb4\xef\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x39\xf8\xfc\x11\xae\x00\x00\x00")

func assetsIconsDirPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsIconsDirPng,
		"assets/icons/dir.png",
	)
}

func assetsIconsDirPng() (*asset, error) {
	bytes, err := assetsIconsDirPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/icons/dir.png", size: 174, mode: os.FileMode(420), modTime: time.Unix(1524065970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIconsGenericPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x61\x60\x60\x10\xe3\x60\x66\x60\x60\xf8\x3e\xdf\xc7\x84\x81\x81\x81\x3f\xc0\x27\xc4\xf5\xff\xff\xff\x67\xfe\xff\x9f\x39\x73\xa6\xb1\xb1\x31\x03\x03\x43\xe8\x46\xe3\xa9\x0c\x0c\x0c\x4c\x25\x41\x7e\xc1\xff\x19\x9e\x6e\x37\xf0\x62\x60\x60\xb0\xf1\x74\x71\x0c\xa9\xb8\x75\xf7\xc4\x45\x5e\x06\x05\x0e\xe6\x8b\x49\x37\xeb\xd3\x36\xaa\xb1\x1d\xe1\xdc\xf3\xbb\x3a\xe1\x5c\x99\x82\x1f\x4b\xbc\x46\x2e\x47\xd9\x94\xb0\x92\x57\xdc\xa1\x6e\xa6\x8b\xda\x5e\xac\xa8\x73\xed\x13\x12\x9f\x55\xa9\x5b\xc0\x94\x77\x89\x71\x0d\xfb\x84\x1b\x20\x53\x19\x3c\x5d\xfd\x5c\xd6\x39\x25\x34\x01\x02\x00\x00\xff\xff\x4a\xb7\xc6\x25\x9e\x00\x00\x00")

func assetsIconsGenericPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsIconsGenericPng,
		"assets/icons/generic.png",
	)
}

func assetsIconsGenericPng() (*asset, error) {
	bytes, err := assetsIconsGenericPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/icons/generic.png", size: 158, mode: os.FileMode(420), modTime: time.Unix(1524065968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIconsImage2Png = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\xe5\x00\x1a\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x14\x00\x00\x00\x16\x08\x03\x00\x00\x00\xf7\x9f\x4c\x34\x00\x00\x00\x24\x50\x4c\x54\x45\xff\xff\xff\xff\x33\x33\xcc\xff\xff\xcc\xcc\xcc\x99\x99\x99\x66\x66\x66\x66\x00\x00\x33\x33\x33\x00\x99\xcc\x00\x99\x33\x00\x33\x66\x00\x00\x00\xcc\xb7\x59\x04\x00\x00\x00\x03\x74\x52\x4e\x53\xff\xff\x00\xd7\xca\x0d\x41\x00\x00\x00\x6d\x49\x44\x41\x54\x78\xda\x6d\xc9\x41\x12\x83\x30\x0c\x43\x51\x35\x86\x28\x81\xfb\xdf\x17\x4d\x04\x1d\xbb\xe5\x6b\xf7\x04\xe6\x9a\x03\xf1\x8d\xe0\x1b\x82\x6f\x28\x35\x7e\x5c\xf8\x67\xc1\x8e\x93\x6b\x3f\xe8\x2a\x02\x9b\x4a\x38\x55\x00\x05\x27\x10\x4b\x71\x63\xc8\x44\x8a\xba\x1e\xec\x7d\xc6\x34\xc6\x71\xa3\x9a\x8e\x31\x12\x72\xd9\xce\x91\x31\x68\x2b\x28\x55\xa3\xa0\x7d\x54\xb4\xfd\x63\x1c\x2e\x61\xca\xc8\xad\x44\x21\x5a\x3b\x6b\xc2\x0b\xa3\x08\x07\x33\x5b\x1e\xaa\xe5\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x99\xd6\x4f\x19\xe5\x00\x00\x00")

func assetsIconsImage2PngBytes() ([]byte, error) {
	return bindataRead(
		_assetsIconsImage2Png,
		"assets/icons/image2.png",
	)
}

func assetsIconsImage2Png() (*asset, error) {
	bytes, err := assetsIconsImage2PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/icons/image2.png", size: 229, mode: os.FileMode(420), modTime: time.Unix(1524065971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIconsLayoutPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\xc4\x00\x3b\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x14\x00\x00\x00\x16\x08\x03\x00\x00\x00\xf7\x9f\x4c\x34\x00\x00\x00\x1b\x50\x4c\x54\x45\xff\xff\xff\xff\xcc\x33\xff\x33\x33\xcc\xff\xff\x99\x99\x99\x99\x66\x33\x66\xcc\xff\x33\x33\x33\x00\x00\x00\x97\x5f\x06\xe3\x00\x00\x00\x04\x74\x52\x4e\x53\xff\xff\xff\x00\x40\x2a\xa9\xf4\x00\x00\x00\x54\x49\x44\x41\x54\x78\xda\xad\xca\x41\x0e\x80\x20\x0c\x44\xd1\x41\xb0\xc3\xfd\x4f\x6c\x19\x6b\x23\xc1\xb8\xe2\x77\xd3\xbc\x0c\xf8\xae\xde\x81\xc8\x08\x7e\x61\xa8\x3e\x25\x04\x13\x4b\x31\x33\xa1\x34\xd0\x84\x9d\xba\x40\x0b\x54\x0f\x9e\x23\x78\xcd\x5b\x10\x89\x73\xbf\xd8\xb3\x6d\x4b\xef\xc0\xf6\xe5\x8a\x6c\x53\x1c\x58\x6b\x9f\x73\xbc\x00\x0d\xef\x05\x90\xfa\x75\xbc\xd6\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xb1\xa4\x7b\xe3\xc4\x00\x00\x00")

func assetsIconsLayoutPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsIconsLayoutPng,
		"assets/icons/layout.png",
	)
}

func assetsIconsLayoutPng() (*asset, error) {
	bytes, err := assetsIconsLayoutPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/icons/layout.png", size: 196, mode: os.FileMode(420), modTime: time.Unix(1524065958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIconsTextPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\xaa\x00\x55\xff\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x14\x00\x00\x00\x16\x08\x03\x00\x00\x00\xf7\x9f\x4c\x34\x00\x00\x00\x0f\x50\x4c\x54\x45\xff\xff\xff\xcc\xff\xff\x99\x99\x99\x33\x33\x33\x00\x00\x00\x55\xb1\x33\x95\x00\x00\x00\x02\x74\x52\x4e\x53\xff\x00\xe5\xb7\x30\x4a\x00\x00\x00\x48\x49\x44\x41\x54\x78\xda\xb5\xca\xd1\x0a\x00\x20\x08\x43\x51\x6d\xfe\xff\x37\xb7\x4a\xa2\x61\xaf\x9e\x08\xe1\x32\xc3\xcb\x0f\x83\x5d\x30\xfc\x22\x6b\x8d\xfc\x35\x12\x32\xc6\xc6\x8b\xfd\x74\x19\x87\x2c\x69\x90\x2e\xb3\xca\x32\xd7\x19\x55\xe7\x92\x1a\x96\x25\x62\x08\xac\xe8\x1e\x8a\x71\x02\x2e\x55\x02\x8c\x10\xaa\x35\x0a\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xda\x3a\x1d\x9c\xaa\x00\x00\x00")

func assetsIconsTextPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsIconsTextPng,
		"assets/icons/text.png",
	)
}

func assetsIconsTextPng() (*asset, error) {
	bytes, err := assetsIconsTextPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/icons/text.png", size: 170, mode: os.FileMode(420), modTime: time.Unix(1524065958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/templates/index.html.tpl": assetsTemplatesIndexHtmlTpl,
	"assets/icons/back.png": assetsIconsBackPng,
	"assets/icons/blank.png": assetsIconsBlankPng,
	"assets/icons/dir.png": assetsIconsDirPng,
	"assets/icons/generic.png": assetsIconsGenericPng,
	"assets/icons/image2.png": assetsIconsImage2Png,
	"assets/icons/layout.png": assetsIconsLayoutPng,
	"assets/icons/text.png": assetsIconsTextPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"icons": &bintree{nil, map[string]*bintree{
			"back.png": &bintree{assetsIconsBackPng, map[string]*bintree{}},
			"blank.png": &bintree{assetsIconsBlankPng, map[string]*bintree{}},
			"dir.png": &bintree{assetsIconsDirPng, map[string]*bintree{}},
			"generic.png": &bintree{assetsIconsGenericPng, map[string]*bintree{}},
			"image2.png": &bintree{assetsIconsImage2Png, map[string]*bintree{}},
			"layout.png": &bintree{assetsIconsLayoutPng, map[string]*bintree{}},
			"text.png": &bintree{assetsIconsTextPng, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"index.html.tpl": &bintree{assetsTemplatesIndexHtmlTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
