diff --git a/vendor/github.com/ipfs/go-cid/cid.go b/vendor/github.com/ipfs/go-cid/cid.go
index ee37826..6314a21 100644
--- a/vendor/github.com/ipfs/go-cid/cid.go
+++ b/vendor/github.com/ipfs/go-cid/cid.go
@@ -146,8 +146,10 @@
 	if err != nil {
 		panic(err)
 	}
-	if dec.Code != mh.SHA2_256 || dec.Length != 32 {
-		panic("invalid hash for cidv0")
+	if dec.Code == 0 && dec.Length == 34 {
+		// skip valid ED25519 hash?
+	} else if dec.Code != mh.SHA2_256 || dec.Length != 32 {
+		panic("invalid hash for cidv0.")
 	}
 	return Cid{string(mhash)}
 }
@@ -219,14 +221,18 @@
 // <version><codec-type><multihash>
 //
 // Decode will also detect and parse CidV0 strings. Strings
-// starting with "Qm" are considered CidV0 and treated directly
+// starting with "Qm" and "14V" are considered CidV0 and treated directly
 // as B58-encoded multihashes.
 func Decode(v string) (Cid, error) {
 	if len(v) < 2 {
 		return Undef, ErrCidTooShort
 	}
 
-	if len(v) == 46 && v[:2] == "Qm" {
+	switch {
+	case
+		len(v) == 46 && v[:2] == "Qm",  // SHA_256
+		len(v) == 49 && v[:3] == "14V": // ID (e.g.: Ed25519 peer ID)
+
 		hash, err := mh.FromB58String(v)
 		if err != nil {
 			return Undef, err
@@ -282,13 +288,16 @@
 //     <version><codec-type><multihash>
 //
 // CidV0 are also supported. In particular, data buffers starting
-// with length 34 bytes, which starts with bytes [18,32...] are considered
-// binary multihashes.
+// with length 34 bytes, which starts with bytes [18,32...] or [0,34...]
+// are considered binary multihashes.
 //
 // Please use decode when parsing a regular Cid string, as Cast does not
 // expect multibase-encoded data. Cast accepts the output of Cid.Bytes().
 func Cast(data []byte) (Cid, error) {
-	if len(data) == 34 && data[0] == 18 && data[1] == 32 {
+	switch {
+	case
+		len(data) == 34 && data[0] == 18 && data[1] == 32, // Code = SHA_256, Length = 32
+		len(data) == 36 && data[0] == 0 && data[1] == 34:  // Code = ID, Length = 34 (e.g.: Ed25519 peer ID)
 		h, err := mh.Cast(data)
 		if err != nil {
 			return Undef, err
